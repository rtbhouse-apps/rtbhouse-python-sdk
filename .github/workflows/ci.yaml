name: CI

on:
  push:
  pull_request_target:
    types: [labeled]

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: "${{ steps.set-matrix.outputs.matrix }}"
      os: "${{ steps.set-matrix.outputs.os }}"
      python-version: "${{ steps.set-matrix.outputs.python-version }}"
      poetry-version: "${{ steps.set-matrix.outputs.poetry-version }}"
    
    steps:
    - id: set-matrix
      run: |
        MATRIX_DEFINITION='
        {
          "os": ["ubuntu-20.04"],
          "python-version": ["3.8", "3.9", "3.10", "3.11"],
          "poetry-version": ["1.3.1"]
        }'
        MATRIX_AS_STRING=$(echo ${MATRIX_DEFINITION} | jq -R )

        echo "matrix=$MATRIX_AS_STRING" >> $GITHUB_OUTPUT

        echo "os=$(echo $MATRIX_DEFINITION | jq -r '.os | last')" >> $GITHUB_OUTPUT
        echo "python-version=$(echo $MATRIX_DEFINITION | jq -r '."python-version" | last')" >> $GITHUB_OUTPUT
        echo "poetry-version=$(echo $MATRIX_DEFINITION | jq -r '."poetry-version" | last')" >> $GITHUB_OUTPUT

  ci:
    name: CI ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'pr approved')
    needs: "set-matrix"
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.set-matrix.outputs.matrix)}}
    env:
      PYTHONDONTWRITEBYTECODE: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup poetry ${{ matrix.poetry-version }}
        run: |
          curl -sSl https://install.python-poetry.org | python - --version ${{ matrix.poetry-version }}
          ln -s ${POETRY_HOME}/bin/poetry /usr/local/bin/poetry
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Set up poetry cache
        uses: actions/cache@v3
        with:
          path: /home/runner/.cache/pypoetry/virtualenvs
          key: venv-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: venv-${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          poetry install --sync --no-root

      - name: Lint
        run: |
          ./bin/lint.sh

      - name: Create config
        env:
          SDK_TEST_CREDENTIALS: ${{ secrets.SDK_TEST_CREDENTIALS }}
        run: |
          echo "USERNAME = \"$(jq -r .username <<< ${SDK_TEST_CREDENTIALS})\"" > tests/config.py
          echo "PASSWORD = \"$(jq -r .password <<< ${SDK_TEST_CREDENTIALS})\"" >> tests/config.py

      - name: Test
        run: |
          ./bin/test.sh
  
  release-package:
    name: "Release package"
    runs-on: "ubuntu-20.04"
    needs: "ci"
    env:
      # TODO: get last value from ci matrix
      PYTHON_VERSION: "3.11"
      POETRY_VERSION: "1.3.1"
    # if: "contains('refs/heads/master refs/heads/main', github.ref)"
    if: "contains('refs/heads/master refs/heads/main refs/heads/APPS-4412-automatic-release', github.ref)" # TODO: remove

    permissions:
      contents: "write"
      id-token: "write"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # TODO: get secrets to pip repo, github token      
      # - name: "Authenticate to Google Cloud"
      #   id: "gcp-auth"
      #   uses: "google-github-actions/auth@v1"
      #   with:
      #     token_format: "access_token"
      #     workload_identity_provider: "projects/716804851657/locations/global/workloadIdentityPools/github-actions-identity-pool/providers/github-identity-pool-provider"
      #     service_account: "github-actions@rtbhouse-apps.iam.gserviceaccount.com"

      # - name: "Get secrets"
      #   id: "secrets"
      #   uses: "google-github-actions/get-secretmanager-secrets@v1"
      #   with:
      #     secrets: |-
      #       PUBLISH_REPO_CREDENTIALS:projects/rtbhouse-apps/secrets/${{ needs.prepare.outputs.publish-repo-secret }}

      - name: "Setup python ${{ env.PYTHON_VERSION }}"
        uses: "actions/setup-python@v4"
        with:
          python-version: "${{ env.PYTHON_VERSION }}"
          cache: "pip"

      - name: "Setup poetry ${{ env.POETRY_VERSION }}"
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_HOME="$HOME/.poetry" python - --version ${{ env.POETRY_VERSION }} --force
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      # - name: "Configure poetry"
      #   env:
      #     PUBLISH_REPO_CREDENTIALS: "${{ steps.secrets.outputs.PUBLISH_REPO_CREDENTIALS }}"
      #   run: |
      #     export LOGIN=`jq -r .login <<< ${PUBLISH_REPO_CREDENTIALS}`
      #     export TOKEN=`jq -r .token <<< ${PUBLISH_REPO_CREDENTIALS}`
      #     PIP_EXTRA_INDEX_URL=$(echo ${{ needs.prepare.outputs.publish-repo-url }} | sed "s/{LOGIN}/${LOGIN}/" | sed "s/{TOKEN}/${TOKEN}/")
      #     echo ${PIP_EXTRA_INDEX_URL}
      #     echo "PIP_EXTRA_INDEX_URL=${PIP_EXTRA_INDEX_URL}" >> $GITHUB_ENV
      #     poetry config virtualenvs.in-project true
      #     poetry config repositories.publish-repo "${{ needs.prepare.outputs.publish-repo-upload-url }}"
      #     poetry config http-basic.publish-repo ${LOGIN} ${TOKEN}

      - name: Should publish package
        id: should-publish-package
        run: |
          npm install -g semver

          ALL_GIT_TAGS=$(git tag)
          ALL_RELEASES=$(semver ${ALL_GIT_TAGS})
          LAST_RELEASE=$(semver ${ALL_GIT_TAGS} | tail -n1)

          # Current version set in pyproject.toml file
          CURRENT_VERSION=$(semver $(poetry version -s))

          if [[ $ALL_RELEASES == *"${CURRENT_VERSION}"* ]]; then
              echo "::warning::Package version in pyproject.toml not bumped, will not publish new package"
              echo "publish=0" >> $GITHUB_OUTPUT
          else
              echo "::info::Package will be released. Last release version: ${LAST_RELEASE}, current version: ${CURRENT_VERSION}"
              echo "publish=1" >> $GITHUB_OUTPUT
          fi

      - name: Get version
        id: get-version
        run: |
          echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT
        if: steps.should-publish-package.outputs.publish == 1

      # TODO: enable
      # - name: "Publish final package"
      #   run: |
      #     poetry publish --build --no-interaction --repository publish-repo
      #   if: steps.should-publish-package.outputs.publish == 1

      # TODO: enable
      # - name: Create release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: v${{ steps.get-version.outputs.version }}
      #     release_name: v${{ steps.get-version.outputs.version }}
      #   if: steps.should-publish-package.outputs.publish == 1
