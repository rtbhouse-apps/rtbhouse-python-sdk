name: CI

on:
  push:
  pull_request_target:
    types: [labeled]

jobs:
  ci:
    name: CI ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'pr approved')
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        poetry-version: ["1.2.1"]
    env:
      PYTHONDONTWRITEBYTECODE: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup poetry ${{ matrix.poetry-version }}
        run: |
          curl -sSl https://install.python-poetry.org | python - --version ${{ matrix.poetry-version }}
          ln -s ${POETRY_HOME}/bin/poetry /usr/local/bin/poetry
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Set up poetry cache
        uses: actions/cache@v3
        with:
          path: /home/runner/.cache/pypoetry/virtualenvs
          key: venv-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: venv-${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          poetry install --sync --no-root

      - name: Lint
        run: |
          ./bin/lint.sh

      - name: Create config
        env:
          SDK_TEST_CREDENTIALS: ${{ secrets.SDK_TEST_CREDENTIALS }}
        run: |
          echo "USERNAME = \"$(jq -r .username <<< ${SDK_TEST_CREDENTIALS})\"" > tests/config.py
          echo "PASSWORD = \"$(jq -r .password <<< ${SDK_TEST_CREDENTIALS})\"" >> tests/config.py

      - name: Test
        run: |
          ./bin/test.sh
